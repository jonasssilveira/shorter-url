// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: url.sql

package db

import (
	"context"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO url (url_encoded,
                 url_original,
                 expiration_date)
VALUES ($1, $2, $3)RETURNING url_encoded, expiration_date
`

type CreateURLParams struct {
	UrlEncoded     string    `json:"url_encoded"`
	UrlOriginal    string    `json:"url_original"`
	ExpirationDate time.Time `json:"expiration_date"`
}

type CreateURLRow struct {
	UrlEncoded     string    `json:"url_encoded"`
	ExpirationDate time.Time `json:"expiration_date"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.UrlEncoded, arg.UrlOriginal, arg.ExpirationDate)
	var i CreateURLRow
	err := row.Scan(&i.UrlEncoded, &i.ExpirationDate)
	return i, err
}

const deleteDeprecatedURL = `-- name: DeleteDeprecatedURL :exec
DELETE FROM url
WHERE expiration_date < CURRENT_DATE
`

func (q *Queries) DeleteDeprecatedURL(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDeprecatedURL)
	return err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE
FROM url
WHERE id = $1
`

func (q *Queries) DeleteURL(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteURL, id)
	return err
}

const getURL = `-- name: GetURL :one
SELECT id, url_encoded, url_original, expiration_date, created_at
FROM url
WHERE url_encoded = $1 LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, urlEncoded string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURL, urlEncoded)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UrlEncoded,
		&i.UrlOriginal,
		&i.ExpirationDate,
		&i.CreatedAt,
	)
	return i, err
}

const listURL = `-- name: ListURL :many
SELECT id, url_encoded, url_original, expiration_date, created_at
FROM url
ORDER BY $1 LIMIT $2
OFFSET $3
`

type ListURLParams struct {
	Column1 interface{} `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListURL(ctx context.Context, arg ListURLParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listURL, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.UrlEncoded,
			&i.UrlOriginal,
			&i.ExpirationDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateURL = `-- name: UpdateURL :one
UPDATE url
SET expiration_date = $2
WHERE url_encoded = $1 RETURNING url_encoded, expiration_date
`

type UpdateURLParams struct {
	UrlEncoded     string    `json:"url_encoded"`
	ExpirationDate time.Time `json:"expiration_date"`
}

type UpdateURLRow struct {
	UrlEncoded     string    `json:"url_encoded"`
	ExpirationDate time.Time `json:"expiration_date"`
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (UpdateURLRow, error) {
	row := q.db.QueryRowContext(ctx, updateURL, arg.UrlEncoded, arg.ExpirationDate)
	var i UpdateURLRow
	err := row.Scan(&i.UrlEncoded, &i.ExpirationDate)
	return i, err
}
